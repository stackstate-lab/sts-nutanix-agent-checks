etl:
  queries:
    - name: nutanix_disks
      query: "nutanix_client.get(nutanix_client.V2, 'disks')['entities']"
      template_refs:
        - nutanix_disk_template
        - nutanix_disk_online_template
        - nutanix_disk_metric_spec_template
        - nutanix_disk_metric_code_template
  template:
    components:
      - name: nutanix_disk_template
        spec:
          name: "$.disk_hardware_config.serial_number"
          type: "nutanix-disk"
          uid: "|uid('nutanix', 'disk', item['disk_uuid'])"
          layer: "Nutanix Disks"
          labels:
            - "|'prism_cluster:%s' % global_session['cluster_lookup'][jpath('$.cluster_uuid')]"
          custom_properties:
            disk_size: "$.disk_size"
            online: "$.online"
            storage_tier_name: "$.storage_tier_name"
            model: "$.disk_hardware_config.model"
            bad: "$.disk_hardware_config.bad"
            mounted: "$.disk_hardware_config.mounted"
            current_firmware_version: "$.disk_hardware_config.current_firmware_version"
          relations: ["|'<urn:nutanix:host:/%s' % item['node_uuid']"]
    health:
      - name: nutanix_disk_online_template
        spec:
          check_id: "|'%s_online' % item['disk_uuid']"
          check_name: "DiskOnline"
          topo_identifier: "|uid('nutanix', 'disk', item['disk_uuid'])"
          health: "|'CLEAR' if item['online'] else 'WARNING'"
          message: "|'Disk Status is %s' % item['disk_status']"
    metrics:
      - name: nutanix_disk_metric_spec_template
        spec:
          name: "storage.logical_usage_gb"
          metric_type: "gauge"
          value: "|global_session['bytesto'](item['usage_stats']['storage.logical_usage_bytes'], 'g')"
          target_uid: "|uid('nutanix', 'disk', item['disk_uuid'])"
      - name: nutanix_disk_metric_code_template
        code: |
          component_uid = uid('nutanix','disk', item['disk_uuid'])
          bytesto = global_session['bytesto']
          usage_stats = item["usage_stats"]
          factory.add_metric_value("storage.capacity_gb", 
                                    bytesto(usage_stats["storage.capacity_bytes"], 'g'),
                                    target_uid=component_uid)
          factory.add_metric_value("storage.free_gb",
                                    bytesto(usage_stats["storage.free_bytes"], 'g'),
                                    target_uid=component_uid)
          factory.add_metric_value("storage.usage_gb",
                                    bytesto(usage_stats["storage.usage_bytes"], 'g'),
                                    target_uid=component_uid)
        
          
          


