etl:
  queries:
    - name: nutanix_vms
      query: 'nutanix_client.get(nutanix_client.V2, "vms", {"include_vm_disk_config": "true"})["entities"]'
      processor: |
        vm_disks = factory.lookups.setdefault("vm_disks", [])
        [py_.set_(n, "vm_name", item['name']) for n in item["vm_disk_info"]]
        vm_disks.extend(item["vm_disk_info"])
      template_refs:
        - nutanix_vm_template
    - name: nutanix_vm_disks
      query: '|factory.lookups.get("vm_disks", [])'
      template_refs:
        - nutanix_vm_disk
  template:
    components:
      - name: nutanix_vm_template
        spec:
          name: "$.name"
          type: "nutanix-vm"
          uid: "|'urn:host:/%s' % item['name']"
          layer: "Nutanix VMs"
          identifiers: ["|uid('nutanix', 'vm', item['uuid'])"]
          custom_properties:
            uuid: "$.uuid"
            memory_mb: "$.memory_mb"
            num_cores_per_vcpu: "$.num_cores_per_vcpu"
            num_vcpus: "$.num_vcpus"
            power_state: "$.power_state"
            machine_type: "$.machine_type"
          relations: |
              |results = [uid('nutanix', 'host', item['host_uuid'])]
              for disk_info in item["vm_disk_info"]:
                  results.append("urn:nutanix:vmdisk:/%s" % (disk_info["disk_address"]["vmdisk_uuid"]))
              results
      - name: nutanix_vm_disk
        spec:
          name: "|'%s-%s' % (item['vm_name'], jpath('$.disk_address.disk_label'))"
          type: "nutanix-vm-disk"
          uid: "|uid('nutanix', 'vmdisk', item['disk_address']['vmdisk_uuid'])"
          layer: "Nutanix VM Disks"
          custom_properties:
            device_bus: "$.disk_address.device_bus"
            disk_label: "$.disk_address.disk_label"
            disk_size_gb: "|global_session['bytesto'](item['size'], 'g')"
