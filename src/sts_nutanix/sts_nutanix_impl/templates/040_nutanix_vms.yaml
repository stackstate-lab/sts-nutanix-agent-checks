etl:
  queries:
    - name: nutanix_vms
      query: '|nutanix_client.post(nutanix_client.V3, "vms/list", {"kind": "vm"})["entities"]'
      processor: |
        vm_disks = factory.lookups.setdefault("vm_disks", [])
        disk_list = item["status"]["resources"]["disk_list"]
        [py_.set_(n, "vm_name", item["status"]['name']) for n in disk_list]
        vm_disks.extend(disk_list)
      template_refs:
        - nutanix_vm_template
    - name: nutanix_vm_disks
      query: '|factory.lookups.get("vm_disks", [])'
      template_refs:
        - nutanix_vm_disk
  template:
    components:
      - name: nutanix_vm_template
        spec:
          name: "$.status.name"
          type: "nutanix-vm"
          uid: "|'urn:host:/%s' % item['status']['name']"
          layer: "Nutanix VMs"
          custom_properties:
            memory_mb: "$.status.resources.memory_size_mib"
            num_vcpus_per_socket: "$.status.resources.num_vcpus_per_socket"
            power_state: "$.status.resources.power_state"
            machine_type: "$.status.resources.machine_type"
          relations: |
              |results = [uid('nutanix', 'host', item['status']['resources']['host_reference']['uuid'])]
              for disk_info in item["status"]["resources"]["disk_list"]:
                  results.append("urn:nutanix:vmdisk:/%s" % (disk_info["uuid"]))
              results
      - name: nutanix_vm_disk
        spec:
          name: |
              |disk_address = item['device_properties']['disk_address']
              '%s-%s-%s' % (item['vm_name'], disk_address['adapter_type'], disk_address['device_index'])
          type: "nutanix-vm-disk"
          uid: "|uid('nutanix', 'vmdisk', item['uuid'])"
          layer: "Nutanix VM Disks"
          custom_properties:
            uuid: "$.uuid"
            disk_size_gb: "|global_session['bytesto'](item['disk_size_bytes'], 'g')"
